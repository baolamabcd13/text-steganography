import streamlit as st
import pyperclip
import matplotlib.pyplot as plt
from src.zero_width_steg import ZeroWidthSteg
from src.morse_steg import MorseSteg
from src.unicode_steg import UnicodeSteg
from src.encryption import Encryptor
from src.analyzer import StegAnalyzer  # Import module ph√¢n t√≠ch m·ªõi

# Kh·ªüi t·∫°o c√°c ph∆∞∆°ng ph√°p steganography, encryptor v√† analyzer
zero_width_steg = ZeroWidthSteg()
morse_steg = MorseSteg()
unicode_steg = UnicodeSteg()
encryptor = Encryptor()
analyzer = StegAnalyzer()  # Kh·ªüi t·∫°o analyzer

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n",
    page_icon="üîí",
    layout="wide"
)

# H√†m sao ch√©p vƒÉn b·∫£n v√†o clipboard
def copy_to_clipboard(text):
    pyperclip.copy(text)
    st.success("ƒê√£ sao ch√©p v√†o clipboard!")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n")
st.markdown("---")

# T·∫°o tabs cho c√°c ph∆∞∆°ng ph√°p kh√°c nhau v√† tab ph√¢n t√≠ch
tab1, tab2, tab3, tab4 = st.tabs(["Zero-width Characters", "M√£ Morse ·∫®n", "Unicode Steganography", "Ph√¢n t√≠ch"])

# Tab 1: Zero-width Characters
with tab1:
    st.header("Ph∆∞∆°ng ph√°p Zero-width Characters")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp")
        
        cover_text = st.text_area("VƒÉn b·∫£n g·ªëc:", height=150, key="zw_cover")
        secret_text = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="zw_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="zw_use_password")
        password = ""
        if use_password:
            password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="zw_password")
        
        # T·∫°o hai c·ªôt cho n√∫t ·∫©n th√¥ng ƒëi·ªáp v√† n√∫t sao ch√©p
        hide_col1, hide_col2 = st.columns([1, 1])
        
        with hide_col1:
            hide_button = st.button("·∫®n th√¥ng ƒëi·ªáp", key="zw_hide_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t ·∫©n th√¥ng ƒëi·ªáp
        if hide_button:
            if not cover_text or not secret_text:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif use_password and not password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = secret_text
                    if use_password:
                        message_to_hide = encryptor.encrypt(secret_text, password)
                    
                    result = zero_width_steg.hide(cover_text, message_to_hide)
                    st.session_state.zw_result = result
                    st.text_area("K·∫øt qu·∫£:", value=result, height=150, key="zw_result_area")
                    st.success("ƒê√£ ·∫©n th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
        with hide_col2:
            if 'zw_result' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="zw_copy_btn"):
                    copy_to_clipboard(st.session_state.zw_result)
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp")
        
        stego_text = st.text_area("VƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n:", height=150, key="zw_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="zw_is_encrypted")
        decrypt_password = ""
        if is_encrypted:
            decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="zw_decrypt_password")
        
        # T·∫°o hai c·ªôt cho n√∫t tr√≠ch xu·∫•t v√† n√∫t sao ch√©p
        extract_col1, extract_col2 = st.columns([1, 1])
        
        with extract_col1:
            extract_button = st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="zw_extract_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t tr√≠ch xu·∫•t
        if extract_button:
            if not stego_text:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n")
            elif is_encrypted and not decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    extracted_message = zero_width_steg.extract(stego_text)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.session_state.zw_extracted = extracted_message
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="zw_extracted_area")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ tr√≠ch xu·∫•t
        with extract_col2:
            if 'zw_extracted' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="zw_copy_extract_btn"):
                    copy_to_clipboard(st.session_state.zw_extracted)

# Tab 2: M√£ Morse ·∫®n
with tab2:
    st.header("Ph∆∞∆°ng ph√°p M√£ Morse ·∫®n")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp b·∫±ng M√£ Morse")
        
        morse_secret = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="morse_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        morse_use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="morse_use_password")
        morse_password = ""
        if morse_use_password:
            morse_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="morse_password")
        
        # T·∫°o hai c·ªôt cho n√∫t t·∫°o vƒÉn b·∫£n ·∫©n v√† n√∫t sao ch√©p
        morse_hide_col1, morse_hide_col2 = st.columns([1, 1])
        
        with morse_hide_col1:
            morse_hide_button = st.button("T·∫°o vƒÉn b·∫£n ·∫©n", key="morse_hide_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t t·∫°o vƒÉn b·∫£n ·∫©n
        if morse_hide_button:
            if not morse_secret:
                st.error("Vui l√≤ng nh·∫≠p th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif morse_use_password and not morse_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = morse_secret
                    if morse_use_password:
                        message_to_hide = encryptor.encrypt(morse_secret, morse_password)
                    
                    morse_steg.load_word_lists()  # ƒê·∫£m b·∫£o danh s√°ch t·ª´ ƒë∆∞·ª£c t·∫£i
                    result = morse_steg.hide(message_to_hide)
                    st.session_state.morse_result = result
                    st.text_area("K·∫øt qu·∫£ (vƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n):", value=result, height=150, key="morse_result_area")
                    st.success("ƒê√£ t·∫°o vƒÉn b·∫£n ·∫©n th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
        with morse_hide_col2:
            if 'morse_result' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="morse_copy_btn"):
                    copy_to_clipboard(st.session_state.morse_result)
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp t·ª´ M√£ Morse ·∫©n")
        
        morse_stego = st.text_area("VƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n:", height=150, key="morse_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        morse_is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="morse_is_encrypted")
        morse_decrypt_password = ""
        if morse_is_encrypted:
            morse_decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="morse_decrypt_password")
        
        # T·∫°o hai c·ªôt cho n√∫t tr√≠ch xu·∫•t v√† n√∫t sao ch√©p
        morse_extract_col1, morse_extract_col2 = st.columns([1, 1])
        
        with morse_extract_col1:
            morse_extract_button = st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="morse_extract_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t tr√≠ch xu·∫•t
        if morse_extract_button:
            if not morse_stego:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a m√£ Morse ·∫©n")
            elif morse_is_encrypted and not morse_decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    morse_steg.load_word_lists()  # ƒê·∫£m b·∫£o danh s√°ch t·ª´ ƒë∆∞·ª£c t·∫£i
                    extracted_message = morse_steg.extract(morse_stego)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if morse_is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, morse_decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.session_state.morse_extracted = extracted_message
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="morse_extracted_area")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ tr√≠ch xu·∫•t
        with morse_extract_col2:
            if 'morse_extracted' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="morse_copy_extract_btn"):
                    copy_to_clipboard(st.session_state.morse_extracted)

# Tab 3: Unicode Steganography
with tab3:
    st.header("Ph∆∞∆°ng ph√°p Unicode Steganography")
    
    # T·∫°o 2 c·ªôt cho ·∫©n v√† tr√≠ch xu·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("·∫®n th√¥ng ƒëi·ªáp b·∫±ng Unicode")
        
        unicode_cover = st.text_area("VƒÉn b·∫£n g·ªëc:", height=150, key="unicode_cover")
        unicode_secret = st.text_area("Th√¥ng ƒëi·ªáp b√≠ m·∫≠t:", height=100, key="unicode_secret")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u
        unicode_use_password = st.checkbox("S·ª≠ d·ª•ng m·∫≠t kh·∫©u b·∫£o v·ªá", key="unicode_use_password")
        unicode_password = ""
        if unicode_use_password:
            unicode_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u:", type="password", key="unicode_password")
        
        # T·∫°o hai c·ªôt cho n√∫t ·∫©n th√¥ng ƒëi·ªáp v√† n√∫t sao ch√©p
        unicode_hide_col1, unicode_hide_col2 = st.columns([1, 1])
        
        with unicode_hide_col1:
            unicode_hide_button = st.button("·∫®n th√¥ng ƒëi·ªáp", key="unicode_hide_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t ·∫©n th√¥ng ƒëi·ªáp
        if unicode_hide_button:
            if not unicode_cover or not unicode_secret:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† th√¥ng ƒëi·ªáp b√≠ m·∫≠t")
            elif unicode_use_password and not unicode_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u")
            else:
                try:
                    # M√£ h√≥a th√¥ng ƒëi·ªáp n·∫øu s·ª≠ d·ª•ng m·∫≠t kh·∫©u
                    message_to_hide = unicode_secret
                    if unicode_use_password:
                        message_to_hide = encryptor.encrypt(unicode_secret, unicode_password)
                    
                    result = unicode_steg.hide(unicode_cover, message_to_hide)
                    st.session_state.unicode_result = result
                    st.text_area("K·∫øt qu·∫£:", value=result, height=150, key="unicode_result_area")
                    st.success("ƒê√£ ·∫©n th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
        with unicode_hide_col2:
            if 'unicode_result' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="unicode_copy_btn"):
                    copy_to_clipboard(st.session_state.unicode_result)
    
    with col2:
        st.subheader("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp t·ª´ Unicode")
        
        unicode_stego = st.text_area("VƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n:", height=150, key="unicode_stego")
        
        # Th√™m t√πy ch·ªçn m·∫≠t kh·∫©u cho gi·∫£i m√£
        unicode_is_encrypted = st.checkbox("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng m·∫≠t kh·∫©u", key="unicode_is_encrypted")
        unicode_decrypt_password = ""
        if unicode_is_encrypted:
            unicode_decrypt_password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£:", type="password", key="unicode_decrypt_password")
        
        # T·∫°o hai c·ªôt cho n√∫t tr√≠ch xu·∫•t v√† n√∫t sao ch√©p
        unicode_extract_col1, unicode_extract_col2 = st.columns([1, 1])
        
        with unicode_extract_col1:
            unicode_extract_button = st.button("Tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp", key="unicode_extract_btn")
        
        # X·ª≠ l√Ω khi nh·∫•n n√∫t tr√≠ch xu·∫•t
        if unicode_extract_button:
            if not unicode_stego:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ch·ª©a th√¥ng ƒëi·ªáp ·∫©n")
            elif unicode_is_encrypted and not unicode_decrypt_password:
                st.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i m√£")
            else:
                try:
                    extracted_message = unicode_steg.extract(unicode_stego)
                    
                    # Gi·∫£i m√£ n·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a
                    if unicode_is_encrypted:
                        try:
                            extracted_message = encryptor.decrypt(extracted_message, unicode_decrypt_password)
                        except ValueError:
                            st.error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a")
                            extracted_message = "L·ªói gi·∫£i m√£: M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng ho·∫∑c th√¥ng ƒëi·ªáp kh√¥ng ƒë∆∞·ª£c m√£ h√≥a"
                    
                    st.session_state.unicode_extracted = extracted_message
                    st.text_area("Th√¥ng ƒëi·ªáp ƒë∆∞·ª£c tr√≠ch xu·∫•t:", value=extracted_message, height=100, key="unicode_extracted_area")
                    st.success("ƒê√£ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        
        # Hi·ªÉn th·ªã n√∫t sao ch√©p n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ tr√≠ch xu·∫•t
        with unicode_extract_col2:
            if 'unicode_extracted' in st.session_state:
                if st.button("Sao ch√©p k·∫øt qu·∫£", key="unicode_copy_extract_btn"):
                    copy_to_clipboard(st.session_state.unicode_extracted)

# Tab 4: Ph√¢n t√≠ch
with tab4:
    st.header("Ph√¢n t√≠ch Steganography")
    
    analysis_type = st.radio(
        "Ch·ªçn lo·∫°i ph√¢n t√≠ch:",
        ["So s√°nh vƒÉn b·∫£n", "Ph√°t hi·ªán Steganography"]
    )
    
    if analysis_type == "So s√°nh vƒÉn b·∫£n":
        st.subheader("So s√°nh vƒÉn b·∫£n g·ªëc v√† vƒÉn b·∫£n ƒë√£ ·∫©n th√¥ng tin")
        
        col1, col2 = st.columns(2)
        
        with col1:
            original_text = st.text_area("VƒÉn b·∫£n g·ªëc:", height=150, key="analysis_original")
        
        with col2:
            stego_text = st.text_area("VƒÉn b·∫£n ƒë√£ ·∫©n th√¥ng tin:", height=150, key="analysis_stego")
        
        steg_method = st.selectbox(
            "Ph∆∞∆°ng ph√°p ·∫©n th√¥ng tin ƒë∆∞·ª£c s·ª≠ d·ª•ng:",
            ["Zero-width Characters", "M√£ Morse ·∫®n", "Unicode Steganography"]
        )
        
        if st.button("Ph√¢n t√≠ch", key="analyze_btn"):
            if not original_text or not stego_text:
                st.error("Vui l√≤ng nh·∫≠p c·∫£ vƒÉn b·∫£n g·ªëc v√† vƒÉn b·∫£n ƒë√£ ·∫©n th√¥ng tin")
            else:
                # Ph√¢n t√≠ch chung
                general_results = analyzer.analyze_text_changes(original_text, stego_text)
                
                # Ph√¢n t√≠ch c·ª• th·ªÉ theo ph∆∞∆°ng ph√°p
                specific_results = {}
                if steg_method == "Zero-width Characters":
                    specific_results = analyzer.analyze_zero_width(stego_text)
                elif steg_method == "M√£ Morse ·∫®n":
                    specific_results = analyzer.analyze_morse(stego_text)
                elif steg_method == "Unicode Steganography":
                    specific_results = analyzer.analyze_unicode(stego_text, unicode_steg.similar_chars)
                
                # T√≠nh entropy
                original_entropy = analyzer.calculate_entropy(original_text)
                stego_entropy = analyzer.calculate_entropy(stego_text)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch")
                
                # T·∫°o 3 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
                res_col1, res_col2, res_col3 = st.columns(3)
                
                with res_col1:
                    st.write("**Th√¥ng tin c∆° b·∫£n:**")
                    st.write(f"- ƒê·ªô d√†i vƒÉn b·∫£n g·ªëc: {general_results['original_length']} k√Ω t·ª±")
                    st.write(f"- ƒê·ªô d√†i vƒÉn b·∫£n ƒë√£ ·∫©n: {general_results['stego_length']} k√Ω t·ª±")
                    st.write(f"- Ch√™nh l·ªách ƒë·ªô d√†i: {general_results['length_difference']} k√Ω t·ª±")
                    st.write(f"- S·ªë k√Ω t·ª± kh√°c nhau: {general_results['different_chars']}")
                    st.write(f"- T·ª∑ l·ªá thay ƒë·ªïi: {general_results['change_ratio']:.2%}")
                
                with res_col2:
                    st.write("**Th√¥ng tin entropy:**")
                    st.write(f"- Entropy vƒÉn b·∫£n g·ªëc: {original_entropy:.4f}")
                    st.write(f"- Entropy vƒÉn b·∫£n ƒë√£ ·∫©n: {stego_entropy:.4f}")
                    st.write(f"- Ch√™nh l·ªách entropy: {stego_entropy - original_entropy:.4f}")
                
                with res_col3:
                    st.write("**Th√¥ng tin c·ª• th·ªÉ:**")
                    if steg_method == "Zero-width Characters":
                        st.write(f"- S·ªë k√Ω t·ª± zero-width space: {specific_results['zwsp_count']}")
                        st.write(f"- S·ªë k√Ω t·ª± zero-width joiner: {specific_results['zwj_count']}")
                        st.write(f"- S·ªë k√Ω t·ª± zero-width non-joiner: {specific_results['zwnj_count']}")
                        st.write(f"- T·ªïng s·ªë k√Ω t·ª± zero-width: {specific_results['total_zero_width']}")
                        st.write(f"- T·ª∑ l·ªá k√Ω t·ª± zero-width: {specific_results['zero_width_ratio']:.2%}")
                    
                    elif steg_method == "M√£ Morse ·∫®n":
                        st.write(f"- S·ªë t·ª´ ng·∫Øn (1-3 k√Ω t·ª±): {specific_results['short_words']}")
                        st.write(f"- S·ªë t·ª´ d√†i (4+ k√Ω t·ª±): {specific_results['long_words']}")
                        st.write(f"- T·ªïng s·ªë t·ª´: {specific_results['total_words']}")
                        st.write(f"- T·ª∑ l·ªá t·ª´ ng·∫Øn: {specific_results['short_words_ratio']:.2%}")
                        st.write(f"- T·ª∑ l·ªá t·ª´ d√†i: {specific_results['long_words_ratio']:.2%}")
                        st.write(f"- T·ª∑ l·ªá t·ª´ ng·∫Øn/d√†i: {specific_results['short_long_ratio']:.2f}")
                    
                    elif steg_method == "Unicode Steganography":
                        st.write(f"- S·ªë k√Ω t·ª± Unicode ƒë·∫∑c bi·ªát: {specific_results['homoglyph_count']}")
                        st.write(f"- T·ª∑ l·ªá k√Ω t·ª± Unicode ƒë·∫∑c bi·ªát: {specific_results['homoglyph_ratio']:.2%}")
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë k√Ω t·ª±
                st.subheader("Bi·ªÉu ƒë·ªì ph√¢n b·ªë k√Ω t·ª±")
                fig = analyzer.plot_char_distribution(original_text, stego_text)
                if fig:
                    st.pyplot(fig)
                else:
                    st.info("Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë k√Ω t·ª±")
                
                # ƒê√°nh gi√° b·∫£o m·∫≠t
                st.subheader("ƒê√°nh gi√° b·∫£o m·∫≠t")
                
                # ƒê√°nh gi√° kh·∫£ nƒÉng ph√°t hi·ªán
                if steg_method == "Zero-width Characters":
                    detectability = "Th·∫•p (kh√≥ ph√°t hi·ªán b·∫±ng m·∫Øt th∆∞·ªùng)"
                    robustness = "Trung b√¨nh (c√≥ th·ªÉ b·ªã m·∫•t khi sao ch√©p qua m·ªôt s·ªë n·ªÅn t·∫£ng)"
                    capacity = "Cao (8 bit cho m·ªói k√Ω t·ª± ·∫©n)"
                elif steg_method == "M√£ Morse ·∫®n":
                    detectability = "Trung b√¨nh (c√≥ th·ªÉ ph√°t hi·ªán n·∫øu ph√¢n t√≠ch k·ªπ)"
                    robustness = "Cao (kh√¥ng b·ªã m·∫•t khi sao ch√©p)"
                    capacity = "Th·∫•p (kho·∫£ng 1-2 bit cho m·ªói t·ª´)"
                elif steg_method == "Unicode Steganography":
                    detectability = "Trung b√¨nh (c√≥ th·ªÉ ph√°t hi·ªán n·∫øu ph√¢n t√≠ch k·ªπ)"
                    robustness = "Cao (kh√¥ng b·ªã m·∫•t khi sao ch√©p)"
                    capacity = "Trung b√¨nh (1 bit cho m·ªói k√Ω t·ª± c√≥ th·ªÉ thay th·∫ø)"
                
                security_col1, security_col2 = st.columns(2)
                
                with security_col1:
                    st.write("**ƒê√°nh gi√° ph∆∞∆°ng ph√°p:**")
                    st.write(f"- Kh·∫£ nƒÉng ph√°t hi·ªán: {detectability}")
                    st.write(f"- T√≠nh b·ªÅn v·ªØng: {robustness}")
                    st.write(f"- Dung l∆∞·ª£ng ·∫©n: {capacity}")
                
                with security_col2:
                    st.write("**Khuy·∫øn ngh·ªã b·∫£o m·∫≠t:**")
                    if steg_method == "Zero-width Characters":
                        st.write("- S·ª≠ d·ª•ng m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o v·ªá th√¥ng ƒëi·ªáp")
                        st.write("- H·∫°n ch·∫ø ƒë·ªô d√†i th√¥ng ƒëi·ªáp ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng k√Ω t·ª± zero-width")
                        st.write("- C·∫©n th·∫≠n khi sao ch√©p qua c√°c n·ªÅn t·∫£ng kh√°c nhau")
                    elif steg_method == "M√£ Morse ·∫®n":
                        st.write("- S·ª≠ d·ª•ng m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o v·ªá th√¥ng ƒëi·ªáp")
                        st.write("- C·ªë g·∫Øng duy tr√¨ t·ª∑ l·ªá t·ª´ ng·∫Øn/d√†i t·ª± nhi√™n")
                        st.write("- Tr√°nh c√°c th√¥ng ƒëi·ªáp qu√° d√†i do dung l∆∞·ª£ng ·∫©n th·∫•p")
                    elif steg_method == "Unicode Steganography":
                        st.write("- S·ª≠ d·ª•ng m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o v·ªá th√¥ng ƒëi·ªáp")
                        st.write("- Ch·ªçn vƒÉn b·∫£n g·ªëc c√≥ nhi·ªÅu k√Ω t·ª± c√≥ th·ªÉ thay th·∫ø")
                        st.write("- H·∫°n ch·∫ø ƒë·ªô d√†i th√¥ng ƒëi·ªáp ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng k√Ω t·ª± thay th·∫ø")
    
    else:  # Ph√°t hi·ªán Steganography
        st.subheader("Ph√°t hi·ªán d·∫•u hi·ªáu Steganography trong vƒÉn b·∫£n")
        
        suspect_text = st.text_area("Nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra:", height=200, key="detect_text")
        
        if st.button("Ki·ªÉm tra", key="detect_btn"):
            if not suspect_text:
                st.error("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ki·ªÉm tra")
            else:
                # Ph√°t hi·ªán d·∫•u hi·ªáu steganography
                detection_results = analyzer.detect_steganography(suspect_text)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£ ki·ªÉm tra")
                
                # Hi·ªÉn th·ªã k·∫øt lu·∫≠n t·ªïng th·ªÉ
                if detection_results["steganography_detected"]:
                    st.error("‚ö†Ô∏è Ph√°t hi·ªán d·∫•u hi·ªáu c·ªßa steganography trong vƒÉn b·∫£n!")
                else:
                    st.success("‚úÖ Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu r√µ r√†ng c·ªßa steganography.")
                
                # Hi·ªÉn th·ªã chi ti·∫øt
                st.write("**Chi ti·∫øt ki·ªÉm tra:**")
                
                detect_col1, detect_col2 = st.columns(2)
                
                with detect_col1:
                    st.write("**D·∫•u hi·ªáu Zero-width Characters:**")
                    if detection_results["has_zero_width"]:
                        st.write("‚ùå Ph√°t hi·ªán k√Ω t·ª± zero-width")
                        st.write(f"- S·ªë l∆∞·ª£ng: {detection_results['zero_width_count']}")
                    else:
                        st.write("‚úÖ Kh√¥ng ph√°t hi·ªán k√Ω t·ª± zero-width")
                    
                    st.write("**D·∫•u hi·ªáu Unicode ƒë·∫∑c bi·ªát:**")
                    if detection_results["suspicious_homoglyphs"]:
                        st.write("‚ùå Ph√°t hi·ªán k√Ω t·ª± Unicode ƒë√°ng ng·ªù")
                        st.write(f"- S·ªë l∆∞·ª£ng: {detection_results['homoglyph_count']}")
                    else:
                        st.write("‚úÖ Kh√¥ng ph√°t hi·ªán k√Ω t·ª± Unicode ƒë√°ng ng·ªù")
                
                with detect_col2:
                    st.write("**Ph√¢n b·ªë t·ª´ ng·∫Øn/d√†i:**")
                    if detection_results["unusual_word_distribution"]:
                        st.write("‚ùå Ph√¢n b·ªë t·ª´ ng·∫Øn/d√†i b·∫•t th∆∞·ªùng")
                        st.write(f"- T·ª∑ l·ªá t·ª´ ng·∫Øn: {detection_results['short_word_ratio']:.2%}")
                    else:
                        st.write("‚úÖ Ph√¢n b·ªë t·ª´ ng·∫Øn/d√†i b√¨nh th∆∞·ªùng")
                        st.write(f"- T·ª∑ l·ªá t·ª´ ng·∫Øn: {detection_results['short_word_ratio']:.2%}")
                    
                    st.write("**Entropy:**")
                    if detection_results["unusual_entropy"]:
                        st.write("‚ùå Entropy b·∫•t th∆∞·ªùng")
                        st.write(f"- Gi√° tr·ªã: {detection_results['entropy']:.4f}")
                    else:
                        st.write("‚úÖ Entropy b√¨nh th∆∞·ªùng")
                        st.write(f"- Gi√° tr·ªã: {detection_results['entropy']:.4f}")
                
                # Th√™m khuy·∫øn ngh·ªã
                st.subheader("Khuy·∫øn ngh·ªã")
                if detection_results["steganography_detected"]:
                    st.write("""
                    VƒÉn b·∫£n c√≥ d·∫•u hi·ªáu ch·ª©a th√¥ng tin ·∫©n. B·∫°n c√≥ th·ªÉ th·ª≠:
                    - Ki·ªÉm tra c√°c k√Ω t·ª± zero-width b·∫±ng c√°ch sao ch√©p vƒÉn b·∫£n v√†o tr√¨nh so·∫°n th·∫£o c√≥ h·ªó tr·ª£ hi·ªÉn th·ªã k√Ω t·ª± ƒë·∫∑c bi·ªát
                    - S·ª≠ d·ª•ng ch·ª©c nƒÉng tr√≠ch xu·∫•t c·ªßa ·ª©ng d·ª•ng n√†y ƒë·ªÉ th·ª≠ c√°c ph∆∞∆°ng ph√°p kh√°c nhau
                    - N·∫øu nghi ng·ªù c√≥ m·∫≠t kh·∫©u b·∫£o v·ªá, b·∫°n c·∫ßn bi·∫øt m·∫≠t kh·∫©u ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng ƒëi·ªáp
                    """)
                else:
                    st.write("""
                    Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu r√µ r√†ng c·ªßa steganography trong vƒÉn b·∫£n. Tuy nhi√™n, l∆∞u √Ω r·∫±ng:
                    - M·ªôt s·ªë ph∆∞∆°ng ph√°p steganography tinh vi c√≥ th·ªÉ kh√¥ng b·ªã ph√°t hi·ªán b·ªüi c√°c ki·ªÉm tra c∆° b·∫£n
                    - N·∫øu th√¥ng ƒëi·ªáp ƒë∆∞·ª£c m√£ h√≥a b·∫±ng m·∫≠t kh·∫©u, vi·ªác ph√°t hi·ªán s·∫Ω kh√≥ khƒÉn h∆°n
                    - B·∫°n v·∫´n c√≥ th·ªÉ th·ª≠ c√°c ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t kh√°c nhau n·∫øu nghi ng·ªù
                    """)

# Th√™m th√¥ng tin v·ªÅ ·ª©ng d·ª•ng
st.markdown("---")
st.markdown("""
### Gi·ªõi thi·ªáu v·ªÅ c√°c ph∆∞∆°ng ph√°p ·∫©n vƒÉn b·∫£n

1. **Zero-width Characters**: S·ª≠ d·ª•ng c√°c k√Ω t·ª± kh√¥ng hi·ªÉn th·ªã nh∆∞ zero-width space, zero-width joiner ƒë·ªÉ m√£ h√≥a th√¥ng ƒëi·ªáp b√≠ m·∫≠t.

2. **M√£ Morse ·∫®n**: S·ª≠ d·ª•ng t·ª´ ng·∫Øn ƒë·ªÉ bi·ªÉu di·ªÖn d·∫•u ch·∫•m (.) v√† t·ª´ d√†i ƒë·ªÉ bi·ªÉu di·ªÖn g·∫°ch ngang (-) trong m√£ Morse.

3. **Unicode Steganography**: S·ª≠ d·ª•ng c√°c k√Ω t·ª± Unicode ƒë·∫∑c bi·ªát (homoglyphs) tr√¥ng gi·ªëng v·ªõi k√Ω t·ª± th√¥ng th∆∞·ªùng nh∆∞ng c√≥ m√£ Unicode kh√°c nhau.

### B·∫£o m·∫≠t th√¥ng ƒëi·ªáp

·ª®ng d·ª•ng h·ªó tr·ª£ m√£ h√≥a th√¥ng ƒëi·ªáp b·∫±ng m·∫≠t kh·∫©u tr∆∞·ªõc khi ·∫©n, gi√∫p tƒÉng c∆∞·ªùng b·∫£o m·∫≠t cho th√¥ng ƒëi·ªáp b√≠ m·∫≠t. Ngay c·∫£ khi th√¥ng ƒëi·ªáp b·ªã ph√°t hi·ªán, ng∆∞·ªùi kh√¥ng c√≥ m·∫≠t kh·∫©u v·∫´n kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung.
""")

# Footer
st.markdown("---")
st.markdown("¬© 2025 - ·ª®ng d·ª•ng ·∫®n VƒÉn b·∫£n trong VƒÉn b·∫£n | ƒê·ªì √°n m√¥n An to√†n B·∫£o m·∫≠t Th√¥ng tin | Nguy·ªÖn Ho√†ng B·∫£o L√¢m | 2111111032")